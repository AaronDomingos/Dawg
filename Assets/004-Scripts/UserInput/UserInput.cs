//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/004-Scripts/UserInput/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""SampleActionMap"",
            ""id"": ""73550dc5-fc48-4cec-9c04-a0e19fd586ce"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a7a80156-044e-4f68-bc96-f48ff2490fca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""2a0f93e1-23da-4cc6-b259-e9a690153fa4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""da8a261b-a833-4c2d-9b90-28d10a82d4fc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4771ac39-639f-49be-bf6b-82d9cce774ed"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0dd021ee-4c02-4635-a0bb-4a52ceacbf2d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0129e693-0053-454f-bcb8-92daf908e8d9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""babf6546-b67e-4fd1-aa44-60057e71b3b3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""49f63b8e-4811-4eb4-af6a-8266e626ac6a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AdminTesting"",
            ""id"": ""75663924-2e45-4f3e-96f9-0d1d3142e1b1"",
            ""actions"": [
                {
                    ""name"": ""TogglePlayer"",
                    ""type"": ""Button"",
                    ""id"": ""9c6e10e0-9123-44f8-9c92-b026b59272d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpawnObject"",
                    ""type"": ""Button"",
                    ""id"": ""fa131a02-bad5-4d8c-af26-44030ace281d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartSpawner"",
                    ""type"": ""Button"",
                    ""id"": ""c2b73c5c-2a36-45dd-aa19-9b37e2db2497"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""474c0f87-8bac-4f74-a174-6b1374093fde"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6064af6-c243-4540-a2a6-6e9fef4dad90"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcafebed-d19c-4b43-8156-720ee9c8b0a0"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartSpawner"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UserActions"",
            ""id"": ""de787d64-b8eb-433f-bab2-8c813b7c78b1"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""08cdb6d3-eb5f-4e46-989b-bde270f36605"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""44e1648f-7755-4123-b2b5-49cf089840ed"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerActions"",
            ""id"": ""b49fbe73-57b3-4978-86e1-abc9e32ae567"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6c2ceb0e-91e2-4270-a5c3-8c0e0c1d7374"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""817bc5da-d851-4895-9b77-593ff150a007"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1ecdf336-48df-4c3d-bd00-73b0ba46b428"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""eaf37e29-dbb9-47fc-b8c3-4db0ccd2e1e1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""28d3e417-dd8a-42d3-b9e3-3a9c737147f4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c06556cc-5a89-4ca5-b49a-f04597f2ac04"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cb60c472-c659-4f68-a727-4e3062856f62"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e39dc39b-b727-4406-992e-386b7117fc87"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""0ad27b85-827b-4246-87c3-80dba942044f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""be71e7b4-ef0f-410f-9d37-b932ec0fd38e"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3b39571b-0ad6-4000-b68e-33a53b02c94b"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1c745b15-3cef-46b3-bc92-cc3dbd1647be"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""da21cc67-8131-49ad-8d98-823e321d32b7"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""661ebb00-cd25-46bd-8a38-9aed35bdedb3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba42c982-db57-4e8d-9cd6-cf2de87d10f9"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterActions"",
            ""id"": ""314900f0-f6d9-4f18-b8b7-94bb1a1ef252"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""0da2531f-298a-4827-96ea-4833dda62660"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9f74175-15dc-43af-8b08-18c45f3db1e3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DroneActions"",
            ""id"": ""64a781ca-c332-4e4f-aca3-1ab72b8b02df"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""ad1cbc7e-11ad-4ee5-b288-7534e8d4f1e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bc225b64-1099-42de-8fe7-c5131e1abf50"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SampleActionMap
        m_SampleActionMap = asset.FindActionMap("SampleActionMap", throwIfNotFound: true);
        m_SampleActionMap_Move = m_SampleActionMap.FindAction("Move", throwIfNotFound: true);
        m_SampleActionMap_Fire = m_SampleActionMap.FindAction("Fire", throwIfNotFound: true);
        // AdminTesting
        m_AdminTesting = asset.FindActionMap("AdminTesting", throwIfNotFound: true);
        m_AdminTesting_TogglePlayer = m_AdminTesting.FindAction("TogglePlayer", throwIfNotFound: true);
        m_AdminTesting_SpawnObject = m_AdminTesting.FindAction("SpawnObject", throwIfNotFound: true);
        m_AdminTesting_StartSpawner = m_AdminTesting.FindAction("StartSpawner", throwIfNotFound: true);
        // UserActions
        m_UserActions = asset.FindActionMap("UserActions", throwIfNotFound: true);
        m_UserActions_Escape = m_UserActions.FindAction("Escape", throwIfNotFound: true);
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Move = m_PlayerActions.FindAction("Move", throwIfNotFound: true);
        m_PlayerActions_Interact = m_PlayerActions.FindAction("Interact", throwIfNotFound: true);
        m_PlayerActions_TouchInput = m_PlayerActions.FindAction("TouchInput", throwIfNotFound: true);
        // CharacterActions
        m_CharacterActions = asset.FindActionMap("CharacterActions", throwIfNotFound: true);
        m_CharacterActions_Interact = m_CharacterActions.FindAction("Interact", throwIfNotFound: true);
        // DroneActions
        m_DroneActions = asset.FindActionMap("DroneActions", throwIfNotFound: true);
        m_DroneActions_Fire = m_DroneActions.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SampleActionMap
    private readonly InputActionMap m_SampleActionMap;
    private ISampleActionMapActions m_SampleActionMapActionsCallbackInterface;
    private readonly InputAction m_SampleActionMap_Move;
    private readonly InputAction m_SampleActionMap_Fire;
    public struct SampleActionMapActions
    {
        private @UserInput m_Wrapper;
        public SampleActionMapActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_SampleActionMap_Move;
        public InputAction @Fire => m_Wrapper.m_SampleActionMap_Fire;
        public InputActionMap Get() { return m_Wrapper.m_SampleActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SampleActionMapActions set) { return set.Get(); }
        public void SetCallbacks(ISampleActionMapActions instance)
        {
            if (m_Wrapper.m_SampleActionMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_SampleActionMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_SampleActionMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_SampleActionMapActionsCallbackInterface.OnMove;
                @Fire.started -= m_Wrapper.m_SampleActionMapActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_SampleActionMapActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_SampleActionMapActionsCallbackInterface.OnFire;
            }
            m_Wrapper.m_SampleActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
            }
        }
    }
    public SampleActionMapActions @SampleActionMap => new SampleActionMapActions(this);

    // AdminTesting
    private readonly InputActionMap m_AdminTesting;
    private IAdminTestingActions m_AdminTestingActionsCallbackInterface;
    private readonly InputAction m_AdminTesting_TogglePlayer;
    private readonly InputAction m_AdminTesting_SpawnObject;
    private readonly InputAction m_AdminTesting_StartSpawner;
    public struct AdminTestingActions
    {
        private @UserInput m_Wrapper;
        public AdminTestingActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TogglePlayer => m_Wrapper.m_AdminTesting_TogglePlayer;
        public InputAction @SpawnObject => m_Wrapper.m_AdminTesting_SpawnObject;
        public InputAction @StartSpawner => m_Wrapper.m_AdminTesting_StartSpawner;
        public InputActionMap Get() { return m_Wrapper.m_AdminTesting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AdminTestingActions set) { return set.Get(); }
        public void SetCallbacks(IAdminTestingActions instance)
        {
            if (m_Wrapper.m_AdminTestingActionsCallbackInterface != null)
            {
                @TogglePlayer.started -= m_Wrapper.m_AdminTestingActionsCallbackInterface.OnTogglePlayer;
                @TogglePlayer.performed -= m_Wrapper.m_AdminTestingActionsCallbackInterface.OnTogglePlayer;
                @TogglePlayer.canceled -= m_Wrapper.m_AdminTestingActionsCallbackInterface.OnTogglePlayer;
                @SpawnObject.started -= m_Wrapper.m_AdminTestingActionsCallbackInterface.OnSpawnObject;
                @SpawnObject.performed -= m_Wrapper.m_AdminTestingActionsCallbackInterface.OnSpawnObject;
                @SpawnObject.canceled -= m_Wrapper.m_AdminTestingActionsCallbackInterface.OnSpawnObject;
                @StartSpawner.started -= m_Wrapper.m_AdminTestingActionsCallbackInterface.OnStartSpawner;
                @StartSpawner.performed -= m_Wrapper.m_AdminTestingActionsCallbackInterface.OnStartSpawner;
                @StartSpawner.canceled -= m_Wrapper.m_AdminTestingActionsCallbackInterface.OnStartSpawner;
            }
            m_Wrapper.m_AdminTestingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TogglePlayer.started += instance.OnTogglePlayer;
                @TogglePlayer.performed += instance.OnTogglePlayer;
                @TogglePlayer.canceled += instance.OnTogglePlayer;
                @SpawnObject.started += instance.OnSpawnObject;
                @SpawnObject.performed += instance.OnSpawnObject;
                @SpawnObject.canceled += instance.OnSpawnObject;
                @StartSpawner.started += instance.OnStartSpawner;
                @StartSpawner.performed += instance.OnStartSpawner;
                @StartSpawner.canceled += instance.OnStartSpawner;
            }
        }
    }
    public AdminTestingActions @AdminTesting => new AdminTestingActions(this);

    // UserActions
    private readonly InputActionMap m_UserActions;
    private IUserActionsActions m_UserActionsActionsCallbackInterface;
    private readonly InputAction m_UserActions_Escape;
    public struct UserActionsActions
    {
        private @UserInput m_Wrapper;
        public UserActionsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_UserActions_Escape;
        public InputActionMap Get() { return m_Wrapper.m_UserActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UserActionsActions set) { return set.Get(); }
        public void SetCallbacks(IUserActionsActions instance)
        {
            if (m_Wrapper.m_UserActionsActionsCallbackInterface != null)
            {
                @Escape.started -= m_Wrapper.m_UserActionsActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_UserActionsActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_UserActionsActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_UserActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public UserActionsActions @UserActions => new UserActionsActions(this);

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private IPlayerActionsActions m_PlayerActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerActions_Move;
    private readonly InputAction m_PlayerActions_Interact;
    private readonly InputAction m_PlayerActions_TouchInput;
    public struct PlayerActionsActions
    {
        private @UserInput m_Wrapper;
        public PlayerActionsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerActions_Move;
        public InputAction @Interact => m_Wrapper.m_PlayerActions_Interact;
        public InputAction @TouchInput => m_Wrapper.m_PlayerActions_TouchInput;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMove;
                @Interact.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteract;
                @TouchInput.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnTouchInput;
                @TouchInput.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnTouchInput;
                @TouchInput.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnTouchInput;
            }
            m_Wrapper.m_PlayerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @TouchInput.started += instance.OnTouchInput;
                @TouchInput.performed += instance.OnTouchInput;
                @TouchInput.canceled += instance.OnTouchInput;
            }
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // CharacterActions
    private readonly InputActionMap m_CharacterActions;
    private ICharacterActionsActions m_CharacterActionsActionsCallbackInterface;
    private readonly InputAction m_CharacterActions_Interact;
    public struct CharacterActionsActions
    {
        private @UserInput m_Wrapper;
        public CharacterActionsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_CharacterActions_Interact;
        public InputActionMap Get() { return m_Wrapper.m_CharacterActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActionsActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActionsActions instance)
        {
            if (m_Wrapper.m_CharacterActionsActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_CharacterActionsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_CharacterActionsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_CharacterActionsActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_CharacterActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public CharacterActionsActions @CharacterActions => new CharacterActionsActions(this);

    // DroneActions
    private readonly InputActionMap m_DroneActions;
    private IDroneActionsActions m_DroneActionsActionsCallbackInterface;
    private readonly InputAction m_DroneActions_Fire;
    public struct DroneActionsActions
    {
        private @UserInput m_Wrapper;
        public DroneActionsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_DroneActions_Fire;
        public InputActionMap Get() { return m_Wrapper.m_DroneActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActionsActions set) { return set.Get(); }
        public void SetCallbacks(IDroneActionsActions instance)
        {
            if (m_Wrapper.m_DroneActionsActionsCallbackInterface != null)
            {
                @Fire.started -= m_Wrapper.m_DroneActionsActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_DroneActionsActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_DroneActionsActionsCallbackInterface.OnFire;
            }
            m_Wrapper.m_DroneActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
            }
        }
    }
    public DroneActionsActions @DroneActions => new DroneActionsActions(this);
    public interface ISampleActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
    public interface IAdminTestingActions
    {
        void OnTogglePlayer(InputAction.CallbackContext context);
        void OnSpawnObject(InputAction.CallbackContext context);
        void OnStartSpawner(InputAction.CallbackContext context);
    }
    public interface IUserActionsActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IPlayerActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnTouchInput(InputAction.CallbackContext context);
    }
    public interface ICharacterActionsActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IDroneActionsActions
    {
        void OnFire(InputAction.CallbackContext context);
    }
}
